
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ContentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  contentTypeId: 'contentTypeId',
  data: 'data',
  status: 'status',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  scheduledPublishAt: 'scheduledPublishAt'
};

exports.Prisma.ContentTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  schema: 'schema',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug: 'slug',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentCategoryScalarFieldEnum = {
  contentId: 'contentId',
  categoryId: 'categoryId'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentTagScalarFieldEnum = {
  contentId: 'contentId',
  tagId: 'tagId'
};

exports.Prisma.SiteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  domain: 'domain',
  logoUrl: 'logoUrl',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  nicheType: 'nicheType',
  customNicheId: 'customNicheId',
  nicheKeywords: 'nicheKeywords',
  targetAudience: 'targetAudience',
  siteTitle: 'siteTitle',
  siteDescription: 'siteDescription',
  heroTitle: 'heroTitle',
  heroSubtitle: 'heroSubtitle',
  aboutTitle: 'aboutTitle',
  aboutDescription: 'aboutDescription',
  contactEmail: 'contactEmail',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords',
  featuredPostsTitle: 'featuredPostsTitle',
  featuredPostsSubtitle: 'featuredPostsSubtitle',
  featuredProductsTitle: 'featuredProductsTitle',
  featuredProductsSubtitle: 'featuredProductsSubtitle',
  newsletterTitle: 'newsletterTitle',
  newsletterSubtitle: 'newsletterSubtitle',
  autoBlogEnabled: 'autoBlogEnabled',
  autoBlogFrequency: 'autoBlogFrequency',
  autoBlogPostTypes: 'autoBlogPostTypes',
  autoBlogCategories: 'autoBlogCategories',
  footerText: 'footerText',
  socialLinks: 'socialLinks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteContentScalarFieldEnum = {
  siteId: 'siteId',
  contentId: 'contentId'
};

exports.Prisma.MediaAssetScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  altText: 'altText',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteMediaScalarFieldEnum = {
  siteId: 'siteId',
  contentId: 'contentId',
  mediaAssetId: 'mediaAssetId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  manufacturer: 'manufacturer',
  basePrice: 'basePrice',
  mainImageUrl: 'mainImageUrl',
  specifications: 'specifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteProductScalarFieldEnum = {
  siteId: 'siteId',
  productId: 'productId',
  price: 'price',
  discount: 'discount',
  inStock: 'inStock',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
};

exports.Prisma.ProductCustomFieldScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  siteId: 'siteId',
  fieldName: 'fieldName',
  fieldType: 'fieldType',
  fieldValue: 'fieldValue',
  displayOrder: 'displayOrder',
  isRequired: 'isRequired',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductPriceHistoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  price: 'price',
  currency: 'currency',
  source: 'source',
  recordedAt: 'recordedAt'
};

exports.Prisma.PriceAlertScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  productId: 'productId',
  alertType: 'alertType',
  threshold: 'threshold',
  isActive: 'isActive',
  createdAt: 'createdAt',
  triggeredAt: 'triggeredAt'
};

exports.Prisma.InteractiveQuizScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  title: 'title',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuizQuestionScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  question: 'question',
  questionType: 'questionType',
  order: 'order',
  isRequired: 'isRequired',
  createdAt: 'createdAt'
};

exports.Prisma.QuizQuestionOptionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  optionText: 'optionText',
  optionValue: 'optionValue',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.QuizResultScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  sessionId: 'sessionId',
  answers: 'answers',
  recommendations: 'recommendations',
  completedAt: 'completedAt'
};

exports.Prisma.QuizAnswerScalarFieldEnum = {
  id: 'id',
  resultId: 'resultId',
  questionId: 'questionId',
  answer: 'answer',
  createdAt: 'createdAt'
};

exports.Prisma.AffiliateLinkScalarFieldEnum = {
  id: 'id',
  name: 'name',
  originalUrl: 'originalUrl',
  affiliateUrl: 'affiliateUrl',
  siteId: 'siteId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  productId: 'productId',
  merchantId: 'merchantId',
  displayText: 'displayText',
  trackingId: 'trackingId',
  status: 'status',
  commissionInfo: 'commissionInfo',
  expirationDate: 'expirationDate'
};

exports.Prisma.MerchantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  website: 'website',
  logoUrl: 'logoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkClickScalarFieldEnum = {
  id: 'id',
  affiliateLinkId: 'affiliateLinkId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  clickedAt: 'clickedAt',
  conversionStatus: 'conversionStatus',
  conversionValue: 'conversionValue'
};

exports.Prisma.ConversionScalarFieldEnum = {
  id: 'id',
  affiliateLinkId: 'affiliateLinkId',
  orderId: 'orderId',
  orderValue: 'orderValue',
  commission: 'commission',
  currency: 'currency',
  conversionDate: 'conversionDate',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId',
  siteId: 'siteId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  createdAt: 'createdAt'
};

exports.Prisma.NewsletterSubscriberScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  isActive: 'isActive',
  subscribedAt: 'subscribedAt',
  unsubscribedAt: 'unsubscribedAt',
  preferences: 'preferences',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsletterCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  content: 'content',
  status: 'status',
  sentAt: 'sentAt',
  sentCount: 'sentCount',
  openCount: 'openCount',
  clickCount: 'clickCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsletterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialMediaAccountScalarFieldEnum = {
  id: 'id',
  platform: 'platform',
  username: 'username',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialMediaPostScalarFieldEnum = {
  id: 'id',
  platform: 'platform',
  content: 'content',
  mediaUrls: 'mediaUrls',
  status: 'status',
  scheduledAt: 'scheduledAt',
  publishedAt: 'publishedAt',
  engagement: 'engagement',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AffiliateProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  affiliateUrl: 'affiliateUrl',
  merchant: 'merchant',
  category: 'category',
  tags: 'tags',
  images: 'images',
  specifications: 'specifications',
  availability: 'availability',
  rating: 'rating',
  reviewCount: 'reviewCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AffiliateLinkClickScalarFieldEnum = {
  id: 'id',
  affiliateUrl: 'affiliateUrl',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  clickedAt: 'clickedAt',
  conversionValue: 'conversionValue'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  prepTime: 'prepTime',
  cookTime: 'cookTime',
  servings: 'servings',
  difficulty: 'difficulty',
  cuisine: 'cuisine',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipeIngredientScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  name: 'name',
  amount: 'amount',
  unit: 'unit',
  notes: 'notes',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.RecipeInstructionScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  stepNumber: 'stepNumber',
  instruction: 'instruction',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ContentVersionScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId',
  version: 'version',
  data: 'data',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.RealTimeNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.AIContentLogScalarFieldEnum = {
  id: 'id',
  prompt: 'prompt',
  response: 'response',
  model: 'model',
  tokensUsed: 'tokensUsed',
  cost: 'cost',
  duration: 'duration',
  status: 'status',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.BulkImportScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  status: 'status',
  totalRows: 'totalRows',
  processedRows: 'processedRows',
  errorRows: 'errorRows',
  errors: 'errors',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.MakeWebhookScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  secret: 'secret',
  isActive: 'isActive',
  events: 'events',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CookieConsentScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  preferences: 'preferences',
  consentedAt: 'consentedAt'
};

exports.Prisma.AdSpaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  adType: 'adType',
  isActive: 'isActive',
  adCode: 'adCode',
  dimensions: 'dimensions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomNicheScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  keywords: 'keywords',
  categories: 'categories',
  targetAudience: 'targetAudience',
  competitionLevel: 'competitionLevel',
  profitabilityScore: 'profitabilityScore',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AutoBlogPostScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  title: 'title',
  content: 'content',
  summary: 'summary',
  keyTakeaways: 'keyTakeaways',
  featuredImage: 'featuredImage',
  status: 'status',
  publishedAt: 'publishedAt',
  scheduledAt: 'scheduledAt',
  seoData: 'seoData',
  tags: 'tags',
  category: 'category',
  postType: 'postType',
  wordCount: 'wordCount',
  readingTime: 'readingTime',
  affiliateLinks: 'affiliateLinks',
  internalLinks: 'internalLinks',
  externalLinks: 'externalLinks',
  aiProvider: 'aiProvider',
  generationCost: 'generationCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentScheduleScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  name: 'name',
  description: 'description',
  frequency: 'frequency',
  interval: 'interval',
  postTypes: 'postTypes',
  categories: 'categories',
  keywords: 'keywords',
  isActive: 'isActive',
  lastRunAt: 'lastRunAt',
  nextRunAt: 'nextRunAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  name: 'name',
  description: 'description',
  slug: 'slug',
  parentId: 'parentId',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Content: 'Content',
  ContentType: 'ContentType',
  Category: 'Category',
  ContentCategory: 'ContentCategory',
  Tag: 'Tag',
  ContentTag: 'ContentTag',
  Site: 'Site',
  SiteContent: 'SiteContent',
  MediaAsset: 'MediaAsset',
  SiteMedia: 'SiteMedia',
  Product: 'Product',
  SiteProduct: 'SiteProduct',
  ProductCustomField: 'ProductCustomField',
  ProductPriceHistory: 'ProductPriceHistory',
  PriceAlert: 'PriceAlert',
  InteractiveQuiz: 'InteractiveQuiz',
  QuizQuestion: 'QuizQuestion',
  QuizQuestionOption: 'QuizQuestionOption',
  QuizResult: 'QuizResult',
  QuizAnswer: 'QuizAnswer',
  AffiliateLink: 'AffiliateLink',
  Merchant: 'Merchant',
  LinkClick: 'LinkClick',
  Conversion: 'Conversion',
  Role: 'Role',
  UserRole: 'UserRole',
  AuditLog: 'AuditLog',
  NewsletterSubscriber: 'NewsletterSubscriber',
  NewsletterCampaign: 'NewsletterCampaign',
  Newsletter: 'Newsletter',
  SocialMediaAccount: 'SocialMediaAccount',
  SocialMediaPost: 'SocialMediaPost',
  AffiliateProduct: 'AffiliateProduct',
  AffiliateLinkClick: 'AffiliateLinkClick',
  Recipe: 'Recipe',
  RecipeIngredient: 'RecipeIngredient',
  RecipeInstruction: 'RecipeInstruction',
  ContentVersion: 'ContentVersion',
  RealTimeNotification: 'RealTimeNotification',
  AIContentLog: 'AIContentLog',
  BulkImport: 'BulkImport',
  MakeWebhook: 'MakeWebhook',
  CookieConsent: 'CookieConsent',
  AdSpace: 'AdSpace',
  CustomNiche: 'CustomNiche',
  AutoBlogPost: 'AutoBlogPost',
  ContentSchedule: 'ContentSchedule',
  ProductCategory: 'ProductCategory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
